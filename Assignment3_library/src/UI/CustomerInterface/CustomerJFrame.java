/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI.CustomerInterface;

import AppSystem.AppSystem;
import Branch.Branch;
import Customer.Customer;
import Library.Material.Book;
import Library.Library;
import Library.Material.Magazine;
import Library.User.UserAccount;
import RentalRequest.RentalRequest;
import UI.Main.MainJFrame;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author emi
 */
public class CustomerJFrame extends javax.swing.JFrame {

    /**
     * Creates new form CustomerJFrame
     */
    private AppSystem app;
    private UserAccount ua;
    private DefaultTableModel bookTableModel;
    private DefaultTableModel magTableModel;
    private DefaultTableModel renttableModel;
    private Customer c;
    
    public CustomerJFrame() {
        initComponents();
    }

    public CustomerJFrame(AppSystem app, UserAccount ua) {
        initComponents();
        this.setVisible(true);
        this.app = app;
        this.ua = ua;
        
        this.bookTableModel = (DefaultTableModel) bookTable.getModel();
        this.magTableModel = (DefaultTableModel) magTable.getModel();
        this.renttableModel = (DefaultTableModel) rrTable.getModel();
        
        this.c = this.app.getCustomerDirectory().findById(ua.getAccountid());
        
        populateBook();
        populateMag();
        populateRental();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        magTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        rrTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        reqLabel = new javax.swing.JLabel();
        fieldduration = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        fieldbookSerial = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        fieldprice = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        bookTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        fieldmagSerial = new javax.swing.JTextField();
        returnBtn = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        backBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        magTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Serial No", "Name", "Register date", "Company", "Issue type", "Is Available", "Library"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        magTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                magTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(magTable);

        rrTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "RequestID", "Book", "Magazine", "Duration", "Price", "Status", "Library"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        rrTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rrTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(rrTable);

        jLabel2.setText("Request history:");

        reqLabel.setMaximumSize(new java.awt.Dimension(90, 25));
        reqLabel.setPreferredSize(new java.awt.Dimension(90, 25));

        fieldduration.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fielddurationFocusLost(evt);
            }
        });

        jLabel4.setText("Book Serial No");

        jLabel5.setText("Price");

        fieldprice.setEditable(false);
        fieldprice.setText("100");
        fieldprice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldpriceActionPerformed(evt);
            }
        });

        addBtn.setText("Add request");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        jLabel6.setText("Book Collection:");

        bookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Serial No", "Name", "Register date", "Author", "Genre", "Pages", "Language", "Binding", "Is Available", "Library"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        bookTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(bookTable);

        jLabel7.setText("Magazine Collection:");

        jLabel1.setText("Create A Rental Request:");

        jLabel8.setText("Magazine Serial No");

        returnBtn.setText("Return");
        returnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBtnActionPerformed(evt);
            }
        });

        jLabel9.setText("Duration (days)");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 877, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel9))
                                .addGap(38, 38, 38)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fieldbookSerial)
                                    .addComponent(fieldduration)
                                    .addComponent(fieldprice, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(fieldmagSerial, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))))
                .addGap(236, 236, 236))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(reqLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(returnBtn)
                .addGap(500, 500, 500))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(30, 30, 30)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 879, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(233, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 145, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(fieldbookSerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(fieldmagSerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldduration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(fieldprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(returnBtn)
                        .addComponent(reqLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addBtn))
                .addGap(79, 79, 79))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(72, 72, 72)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(455, Short.MAX_VALUE)))
        );

        jSplitPane1.setRightComponent(jPanel2);

        backBtn.setText("LOGOUT");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1018, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setTopComponent(jPanel1);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:

        this.setVisible(false);
        MainJFrame mj = new MainJFrame(this.app);
    }//GEN-LAST:event_backBtnActionPerformed
    
    public void populateBook(){
        SimpleDateFormat DateFormat = new SimpleDateFormat("yyyy-MM-dd");
        
        bookTableModel.setRowCount(0);
        for (Branch br: this.app.getBranchDirectory().getBranches()){
            for (Book b : br.getLibrary().getBookDirectory().getBooks()) {
                Object[] row = new Object[10];
                
                row[0] = b.getSerialNo();
                row[1] = b.getName();
                row[2] = DateFormat.format(b.getRegisterDate());
                row[3] = b.getAuthor().getName();
                row[4] = b.getGenre().getGenre();
                row[5] = b.getPages();
                row[6] = b.getLanguage();
                row[7] = b.getBindingType();
                row[8] = b.getAvailString(b.getIsAvailable());
                row[9] = br.getLibrary().getBuildingNo();

                bookTableModel.addRow(row);
            }  
        }  
    }
    
    public void populateMag(){
        SimpleDateFormat DateFormat = new SimpleDateFormat("yyyy-MM-dd");
        
        magTableModel.setRowCount(0);
        for (Branch br: this.app.getBranchDirectory().getBranches()){
            for (Magazine m : br.getLibrary().getMagazineDirectory().getMagazines()) {
                Object[] row = new Object[7];
                
                row[0] = m.getSerialNo();
                row[1] = m.getName();
                row[2] = DateFormat.format(m.getRegisterDate());
                row[3] = m.getCompany();
                row[4] = m.getIssueType();
                row[5] = m.getAvailString(m.getIsAvailable());
                row[6] = br.getLibrary().getBuildingNo();

                magTableModel.addRow(row);
            }  
        }  
    }
    
    public void populateRental(){
        ArrayList<RentalRequest> cusRentals = this.app.getCustomerDirectory().findById(ua.getAccountid()).getRequests();
        
        if (cusRentals.size()>0){
            renttableModel.setRowCount(0);
            
            for (RentalRequest rr : cusRentals) {

                Object[] row = new Object[7];

                row[0] = rr.getId();
                row[1] = (rr.getBook() == null) ? "N/A" : rr.getBook().getName(); //there may not include a book or mag
                row[2] = (rr.getMag() == null) ? "N/A" :rr.getMag().getName();
                row[3] = rr.getDuration();
                row[4] = rr.getPrice();
                row[5] = rr.getStatus();
                row[6] = rr.getLib().getBuildingNo();

                renttableModel.addRow(row);
            }
        }
        
    }
    
    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // TODO add your handling code here:
        
        RentalRequest rr;
        Branch br;
        
        String bookserial = (fieldbookSerial.getText().isEmpty()) ? "N/A" : fieldbookSerial.getText();
        String magserial = (fieldmagSerial.getText().isEmpty()) ? "N/A" : fieldmagSerial.getText();
        String duration = fieldduration.getText();
        String price = fieldprice.getText();

        //get current branch
        if (!bookserial.equals("N/A")){
            br = this.app.getBranchDirectory().findBranchByMaterial(bookserial);
            
        }else{
            br = this.app.getBranchDirectory().findBranchByMaterial(magserial);
        }
        
        //get current library
        Library lib = br.getLibrary();
        
        //get book and magazine object
        Book book = lib.getBookDirectory().findBookBySerial(bookserial);
        Magazine mag = lib.getMagazineDirectory().findMagBySerial(magserial);
        
        //check avail for selected book and/or magazine
        if(book !=null && book.getIsAvailable() && mag == null){
            // customer only needs to borrow a book
            rr = c.addRequest(c, book, mag, Integer.valueOf(duration), lib);
                
            // add it to the library's master request list
            br.getLibrary().getMasterRentalRequestDirectory().getMasterRequestList().add(rr);
                
            //set the selected avail flag to false
            book.setIsAvailable(false);
        }else if(book !=null && book.getIsAvailable() && mag != null && mag.getIsAvailable()){
            //customer borrows one book and one magazine
            rr = c.addRequest(c, book, mag, Integer.valueOf(duration), lib);
                
            br.getLibrary().getMasterRentalRequestDirectory().getMasterRequestList().add(rr);
            
            book.setIsAvailable(false);
            mag.setIsAvailable(false);
        }else if(book == null && mag != null && mag.getIsAvailable()){
            //customer only needs to borrow a magazine
            rr = c.addRequest(c, book, mag, Integer.valueOf(duration), lib);
                
            br.getLibrary().getMasterRentalRequestDirectory().getMasterRequestList().add(rr);
            
            mag.setIsAvailable(false); 
        }else{
            JOptionPane.showMessageDialog(null, "Sorry, material not available.");
        }
    
 
        populateRental();
        
        //update status on rented book and magzine
        populateBook();
        populateMag();
        
        //clear fields
        fieldbookSerial.setText("");
        fieldmagSerial.setText("");
        fieldduration.setText("");
    }//GEN-LAST:event_addBtnActionPerformed

    private void fielddurationFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fielddurationFocusLost

    }//GEN-LAST:event_fielddurationFocusLost

    private void magTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_magTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = magTable.getSelectedRow();
        String sid = (String) magTable.getValueAt(selectedRow, 0);
        
        fieldmagSerial.setText(sid);
    }//GEN-LAST:event_magTableMouseClicked

    private void fieldpriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldpriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldpriceActionPerformed

    private void bookTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = bookTable.getSelectedRow();
        String sid = (String) bookTable.getValueAt(selectedRow, 0);
        
        fieldbookSerial.setText(sid);
    }//GEN-LAST:event_bookTableMouseClicked

    private void returnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = rrTable.getSelectedRow();
        String rrId = (String) rrTable.getValueAt(selectedRow, 0);
        
        //change selected request status to "returned"
        RentalRequest selectedRR = c.findRequest(rrId);
        selectedRR.setStatus("Returned");
        
        //change material status to available
        if(selectedRR.getBook()!=null){
            selectedRR.getBook().setIsAvailable(true);
        }
        if(selectedRR.getMag()!=null){
            selectedRR.getMag().setIsAvailable(true);
        }
        
        //repopulate tables to reflect the avail flag
        populateBook();
        populateMag();
        populateRental();
        
        //clear the selected request id label
        fieldbookSerial.setText("");
    }//GEN-LAST:event_returnBtnActionPerformed

    private void rrTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rrTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = rrTable.getSelectedRow();
        String rrId = (String) rrTable.getValueAt(selectedRow, 0);
        
        //shhow which request is selected to return
        reqLabel.setText(rrId);
    }//GEN-LAST:event_rrTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JTable bookTable;
    private javax.swing.JTextField fieldbookSerial;
    private javax.swing.JTextField fieldduration;
    private javax.swing.JTextField fieldmagSerial;
    private javax.swing.JTextField fieldprice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable magTable;
    private javax.swing.JLabel reqLabel;
    private javax.swing.JButton returnBtn;
    private javax.swing.JTable rrTable;
    // End of variables declaration//GEN-END:variables
}
